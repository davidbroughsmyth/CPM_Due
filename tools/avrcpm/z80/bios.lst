# File bios.asm
0000			;    CP/M BIOS for avrcpm 
0000			;    Copyright (C) 2010 Sprite_tm 
0000			; 
0000			;    This program is free software: you can redistribute it and/or modify 
0000			;    it under the terms of the GNU General Public License as published by 
0000			;    the Free Software Foundation, either version 3 of the License, or 
0000			;    (at your option) any later version. 
0000			; 
0000			;    This program is distributed in the hope that it will be useful, 
0000			;    but WITHOUT ANY WARRANTY; without even the implied warranty of 
0000			;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
0000			;    GNU General Public License for more details. 
0000			; 
0000			;    You should have received a copy of the GNU General Public License 
0000			;    along with this program.  If not, see <http://www.gnu.org/licenses/>. 
0000			 
0000			org $4A00+$A800 
f200 c3 5a f2			jp boot 
f203			wboote: 
f203 c3 61 f2			jp wboot 
f206 c3 8a f2			jp const 
f209 c3 8d f2			jp conin 
f20c c3 97 f2			jp conout 
f20f c3 9d f2			jp list 
f212 c3 9e f2			jp punch 
f215 c3 9f f2			jp reader 
f218 c3 a2 f2			jp home 
f21b c3 a9 f2			jp seldsk 
f21e c3 ba f2			jp settrk 
f221 c3 c0 f2			jp setsec 
f224 c3 c6 f2			jp setdma 
f227 c3 cf f2			jp read 
f22a c3 d6 f2			jp write 
f22d c3 dd f2			jp listst 
f230 c3 e0 f2			jp sectran 
f233			 
f233			; Disk Parameter Header 
f233			dph: 
f233 32 f3			dw trans 		; XLT:    Address of translation table 
f235 00 00			dw 0 			; 000:    Scratchpad 
f237 00 00			dw 0 			; 000:    Scratchpad 
f239 00 00			dw 0 			; 000:    Scratchpad 
f23b 4d f3			dw dirbuf 		; DIRBUF: Address of a dirbuff scratchpad 
f23d 23 f3			dw dpb 			; DPB:    Address of a disk parameter block 
f23f cd f3			dw chk 			; CSV:    Address of scratchpad area for changed disks 
f241 dd f3			dw all 			; ALV:    Address of an allocation info sratchpad 
f243			 
f243			signon: 
f243 0d 0a 0a			db 0dh,0ah,0ah 
f246 ..				db '64' 
f248 ..				db 'K cp/m vers 2.2' 
f257 0d 0a 00			db 0dh,0ah,0 
f25a			 
f25a			boot: 
f25a af				xor a 
f25b 32 03 00			ld (3),a 
f25e 32 04 00			ld (4),a 
f261			 
f261			wboot: 
f261 21 43 f2			ld hl,signon 
f264			nextc: 
f264 7e				ld a,(hl) 
f265 b7				or a 
f266 ca 6f f2			jp z, gocpm 
f269 d3 02			out (2),a 
f26b 23				inc hl 
f26c c3 64 f2			jp nextc 
f26f			 
f26f			 
f26f				;ToDo: re-load CP/M 
f26f			gocpm: 
f26f 21 e3 f2			ld hl,firstBytes 
f272 11 00 00			ld de,0 
f275 0e 40			ld c,$40 ; copy to 0 through 0x3f 
f277			 
f277			fbloop: 
f277 7e				ld a,(hl) 
f278 12				ld (de),a 
f279 23				inc hl 
f27a 13				inc de 
f27b 0d				dec c 
f27c c2 77 f2			jp nz,fbloop 
f27f			 
f27f			; Initialize the DMA to 0x0080 
f27f 01 80 00			ld bc, $0080 
f282 cd c6 f2			call setdma 
f285			 
f285			; Put the initial drive # (0) into c and jump to CP/M 
f285 0e 00			ld c,0 
f287 c3 00 dc			jp $3400+$A800 
f28a			 
f28a			const: 
f28a db 00			in a,(0) 
f28c c9				ret 
f28d			 
f28d			conin: 
f28d db 00			in a,(0) 
f28f fe ff			cp $ff 
f291 c2 8d f2			jp nz,conin 
f294			 
f294 db 01			in a,(1) 
f296 c9				ret 
f297			 
f297			conout: 
f297 f5				push af 
f298 79				ld a,c 
f299 d3 02			out (2),a 
f29b f1				pop af 
f29c c9				ret 
f29d			 
f29d			list: 
f29d c9				ret 
f29e			 
f29e			punch: 
f29e c9				ret 
f29f			 
f29f			reader: 
f29f 3e 1f			ld a,$1F 
f2a1 c9				ret 
f2a2			 
f2a2			home: 
f2a2 f5				push af 
f2a3 3e 00			ld a,0 
f2a5 d3 10			out (16),a 
f2a7 f1				pop af 
f2a8 c9				ret 
f2a9			 
f2a9			seldsk: 
f2a9 f5				push af 
f2aa 79				ld a,c 
f2ab fe 00			cp 0 
f2ad c2 b5 f2			jp nz,seldsk_na 
f2b0 21 33 f2			ld hl,dph 
f2b3 f1				pop af 
f2b4 c9				ret 
f2b5			seldsk_na: 
f2b5 21 00 00			ld hl,0 
f2b8 f1				pop af 
f2b9 c9				ret 
f2ba			 
f2ba			settrk: 
f2ba f5				push af 
f2bb 79				ld a,c 
f2bc d3 10			out (16),a 
f2be f1				pop af 
f2bf c9				ret 
f2c0			 
f2c0			setsec: 
f2c0 f5				push af 
f2c1 79				ld a,c 
f2c2 d3 12			out (18),a 
f2c4 f1				pop af 
f2c5 c9				ret 
f2c6			 
f2c6			setdma: 
f2c6 f5				push af 
f2c7 79				ld a,c 
f2c8 d3 14			out (20),a 
f2ca 78				ld a,b 
f2cb d3 15			out (21),a 
f2cd f1				pop af 
f2ce c9				ret 
f2cf			 
f2cf			read: 
f2cf 3e 01			ld a,1 
f2d1 d3 16			out (22),a 
f2d3 3e 00			ld a,0 
f2d5 c9				ret 
f2d6			 
f2d6			write: 
f2d6 3e 02			ld a,2 
f2d8 d3 16			out (22),a 
f2da 3e 00			ld a,0 
f2dc c9				ret 
f2dd			 
f2dd			listst: 
f2dd 3e 00			ld a,0 
f2df c9				ret 
f2e0			 
f2e0			sectran: 
f2e0				;translate sector bc using table at de, res into hl 
f2e0				;not implemented :) 
f2e0 60				ld h,b 
f2e1 69				ld l,c 
f2e2 c9				ret 
f2e3			 
f2e3			; The following data is moved into the beginning of memory at boot 
f2e3			firstBytes: 
f2e3			; Addr=0x00 : Warm boot 
f2e3 c3 03 f2			jp wboote       ; JMP WBOOT 
f2e6			; Addr=0x03 : IO byte 
f2e6 00				db 0			; IOBYTE 
f2e7			; Addr=0x04 : DSK byte 
f2e7 00				db 0			; user:drive 
f2e8			; Addr=0x05 : BDOS Call 
f2e8 c3 06 e4			jp $3C06+$A800	; JMP BDOS 
f2eb			 
f2eb			; Reserve space for Vectors (not used in this system, but reserved anyway) 
f2eb			; Addr=0x08 : Vector 1 
f2eb			restartVector1: 
f2eb 00...			ds 8 
f2f3			; Addr=0x10 : Vector 2 
f2f3			restartVector2: 
f2f3 00...			ds 8 
f2fb			; Addr=0x18 : Vector 3 
f2fb			restartVector3: 
f2fb 00...			ds 8 
f303			; Addr=0x20 : Vector 4 
f303			restartVector4: 
f303 00...			ds 8 
f30b			; Addr=0x28 : Vector 5 
f30b			restartVector5: 
f30b 00...			ds 8 
f313			; Addr=0x30 : Vector 6 
f313			restartVector6: 
f313 00...			ds 8 
f31b			; Addr=0x38 : Vector 7 
f31b			restartVector7: 
f31b 00...			ds 8 
f323			 
f323			; Disk Parameter Block 
f323			dpb: 
f323 1a 00			dw 26 			; SPT:    sectors per track 
f325 03				db 3 			; BSH:    data allocation block shift factor 
f326 07				db 7 			; BLM:    Data Allocation Mask 
f327 00				db 0 			; EXM:    Extent mask 
f328 f2 00			dw 242 			; DSM:    Disk storage capacity 
f32a 3f 00			dw 63 			; DRM:    no of directory entries 
f32c c0				db 192 			; AL0 
f32d 00				db 0 			; AL1 
f32e 10 00			dw 16 			; CKS:    size of dir check vector 
f330 02 00			dw 2 			; OFF:    no of reserved tracks 
f332			 
f332			; Sector translation table. Not used in this system. 
f332			trans: 
f332 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d		db 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 
f340 0e 0f 10 11 12 13 14 15 16 17 18 19 1a		db 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 
f34d			 
f34d			; Scratchpad area for BDOS directory operation. 
f34d			dirbuf: 
f34d 00...			ds 128			; DMA transfer area 
f3cd			 
f3cd			; Scratchpad area to check for changed disks 
f3cd			chk: 
f3cd 00...			ds 16			;  
f3dd			 
f3dd			; Scratchpad area to keep disk storage allocation information 
f3dd			all: 
f3dd 00...			ds 31			; 
f3fc			 
f3fc			end
# End of file bios.asm
f3fc
