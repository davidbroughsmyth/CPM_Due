# File bios.asm
0000			;    CP/M BIOS for z80due 
0000			;    Copyright (C) 2014 ptcryan 
0000			; 
0000			;    This program is free software: you can redistribute it and/or modify 
0000			;    it under the terms of the GNU General Public License as published by 
0000			;    the Free Software Foundation, either version 3 of the License, or 
0000			;    (at your option) any later version. 
0000			; 
0000			;    This program is distributed in the hope that it will be useful, 
0000			;    but WITHOUT ANY WARRANTY; without even the implied warranty of 
0000			;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
0000			;    GNU General Public License for more details. 
0000			; 
0000			;    You should have received a copy of the GNU General Public License 
0000			;    along with this program.  If not, see <http://www.gnu.org/licenses/>. 
0000			 
0000			mem_offset:	equ	$A800				; Offset for 62K of memory 
0000			bios:		equ	$4A00+mem_offset	; base of BIOS 
0000			cpmb:		equ	$3400+mem_offset	; base of CPM (CCP) 
0000			bdos:		equ	$3c06+mem_offset	; base of BDOS 
0000			iobyte:		equ $0003				; address of the IOBYTE 
0000			cdisk:		equ	$0004				; address of last logged disk 
0000			buff:		equ	$0080				; default buffer address 
0000			 
0000			cr:			equ	$0d					; carriage return 
0000			lf:			equ	$0a					; line feed 
0000			 
0000			c_status:	equ $00 				; console status port 
0000			c_input:	equ $01 				; console input port 
0000			c_output:	equ $02 				; console output port 
0000			t_set: 		equ $10					; track port 
0000			s_set: 		equ $12					; sector port 
0000			dma_low:	equ $14					; dma low port 
0000			dma_high: 	equ $15					; dma high port 
0000			dma_xfer:	equ $16					; dma transfer port 
0000			 
0000			 
0000			 
0000			 
0000			org	bios 
f200 c3 6c f2			jp boot 
f203			wboote: 
f203 c3 7c f2			jp wboot 
f206 c3 c9 f2			jp const 
f209 c3 cc f2			jp conin 
f20c c3 d6 f2			jp conout 
f20f c3 dc f2			jp list 
f212 c3 dd f2			jp punch 
f215 c3 de f2			jp reader 
f218 c3 e1 f2			jp home 
f21b c3 e8 f2			jp seldsk 
f21e c3 f9 f2			jp settrk 
f221 c3 ff f2			jp setsec 
f224 c3 05 f3			jp setdma 
f227 c3 0e f3			jp read 
f22a c3 15 f3			jp write 
f22d c3 1c f3			jp listst 
f230 c3 1f f3			jp sectran 
f233			 
f233			; Disk Parameter Header 
f233			dph: 
f233 3c f3			dw trans 						; XLT:    Address of translation table 
f235 00 00			dw 0 							; 000:    Scratchpad 
f237 00 00			dw 0 							; 000:    Scratchpad 
f239 00 00			dw 0 							; 000:    Scratchpad 
f23b 57 f3			dw dirbuf 						; DIRBUF: Address of a dirbuff scratchpad 
f23d 2d f3			dw dpb 							; DPB:    Address of a disk parameter block 
f23f d7 f3			dw chk 							; CSV:    Address of scratchpad area for changed disks 
f241 e7 f3			dw all 							; ALV:    Address of an allocation info sratchpad 
f243			 
f243			signon: 
f243 0d 0a 0a			db cr, lf, lf 
f246 ..				db '64' 
f248 .. 0d 0a			db 'K CP/M Vers 2.2', cr, lf 
f259 .. 0d 0a 00		db 'Z80Due BIOS v0.2', cr, lf, 0 
f26c			 
f26c			boot: 
f26c			;	ld sp, buff+$80 
f26c 21 43 f2			ld hl, signon 
f26f cd 22 f3			call prmsg 
f272			 
f272 af				xor a 
f273 32 03 00			ld (iobyte), a					; clear the IOBYTE 
f276 32 04 00			ld (cdisk), a					; clear the active disk 
f279 c3 a8 f2			jp gocpm 
f27c			 
f27c			wboot: 
f27c			;	ld sp, buff						; use the disk buffer space for now. Not being used now. 
f27c			 
f27c			; reload CP/M and initialize low memory 
f27c			loadcpm: 
f27c 06 2c			ld b, 44						; load 43 sectors. Just CCP + BDOS. Track 0 sector 1 to Track 1 sector 18 
f27e 11 01 00			ld de, $0001					; start with track 0 sector 1 
f281 21 00 dc			ld hl, cpmb						; destination is start of CCP+b 
f284			loadloop: 
f284 4a				ld c, d			 				; set the track 
f285 cd f9 f2			call settrk 
f288 4b				ld c ,e							; set sector 
f289 cd ff f2			call setsec 
f28c c5				push bc 
f28d 44				ld b, h							; set DMA 
f28e 4d				ld c, l 
f28f cd 05 f3			call setdma 
f292			;	pop bc 
f292 cd 0e f3			call read 						; Read sector to RAM 
f295			;	push bc 
f295 01 80 00			ld bc, $80 						; increment RAM pointer to next block 
f298 09				add hl, bc 
f299 c1				pop bc 
f29a 1c				inc e 							; increment sector 
f29b 7b				ld a, e 
f29c fe 1a			cp 26 
f29e c2 a4 f2			jp nz, noNextTrack 
f2a1 14				inc d 							; increment track 
f2a2 1e 00			ld e, 0 						; reset sector counter to 0 
f2a4			noNextTrack: 
f2a4 05				dec b 
f2a5 c2 84 f2			jp nz, loadloop 
f2a8			 
f2a8			; CP/M is reloaded. Now initialize low memory 
f2a8			; Initialize the DMA to 0x0080 
f2a8			gocpm: 
f2a8 01 80 00			ld bc, buff 
f2ab cd 05 f3			call setdma 
f2ae			 
f2ae			; Reset cp/m entry points 
f2ae 3e c3			ld a, $c3						; load a with jump opcode 
f2b0 32 00 00			ld (0), a						; store at 0000 
f2b3 21 03 f2			ld hl, wboote					; load hl with warm boot address 
f2b6 22 01 00			ld (1), hl						; store at 0001 
f2b9 32 05 00			ld (5), a						; store jump at 0005 
f2bc 21 06 e4			ld hl, bdos						; load hl with bdos entry 
f2bf 22 06 00			ld (6), hl						; store at 0006 
f2c2			 
f2c2			; Put the initial drive # into c and jump to CP/M 
f2c2 3a 04 00			ld a, (cdisk) 
f2c5 4f				ld c, a 
f2c6			 
f2c6 c3 00 dc			jp cpmb							; jump to CCP 
f2c9			 
f2c9			const: 
f2c9 db 00			in a,(c_status) 
f2cb c9				ret 
f2cc			 
f2cc			conin: 
f2cc db 00			in a,(c_status) 
f2ce fe ff			cp $ff 
f2d0 c2 cc f2			jp nz,conin 
f2d3			 
f2d3 db 01			in a,(c_input) 
f2d5 c9				ret 
f2d6			 
f2d6			conout: 
f2d6 f5				push af 
f2d7 79				ld a,c 
f2d8 d3 02			out (c_output),a 
f2da f1				pop af 
f2db c9				ret 
f2dc			 
f2dc			list: 
f2dc c9				ret 
f2dd			 
f2dd			punch: 
f2dd c9				ret 
f2de			 
f2de			reader: 
f2de 3e 1a			ld a,$1A						; enter end of file for now 
f2e0 c9				ret 
f2e1			 
f2e1			home: 
f2e1 f5				push af 
f2e2 3e 00			ld a,0 
f2e4 d3 10			out (t_set),a 
f2e6 f1				pop af 
f2e7 c9				ret 
f2e8			 
f2e8			seldsk: 
f2e8 f5				push af 
f2e9 79				ld a,c 
f2ea fe 00			cp 0 
f2ec c2 f4 f2			jp nz,seldsk_na 
f2ef 21 33 f2			ld hl,dph 
f2f2 f1				pop af 
f2f3 c9				ret 
f2f4			seldsk_na: 
f2f4 21 00 00			ld hl,0 
f2f7 f1				pop af 
f2f8 c9				ret 
f2f9			 
f2f9			settrk:								; TODO: should be word arg. Use BC not just C. 
f2f9 f5				push af 
f2fa 79				ld a,c 
f2fb d3 10			out (t_set),a 
f2fd f1				pop af 
f2fe c9				ret 
f2ff			 
f2ff			setsec: 
f2ff f5				push af 
f300 79				ld a,c 
f301 d3 12			out (s_set),a 
f303 f1				pop af 
f304 c9				ret 
f305			 
f305			setdma: 
f305 f5				push af 
f306 79				ld a,c 
f307 d3 14			out (dma_low),a 
f309 78				ld a,b 
f30a d3 15			out (dma_high),a 
f30c f1				pop af 
f30d c9				ret 
f30e			 
f30e			read: 
f30e 3e 01			ld a,1 
f310 d3 16			out (dma_xfer),a 
f312 3e 00			ld a,0 
f314 c9				ret 
f315			 
f315			write: 
f315 3e 02			ld a,2 
f317 d3 16			out (dma_xfer),a 
f319 3e 00			ld a,0 
f31b c9				ret 
f31c			 
f31c			listst: 
f31c 3e 00			ld a,0 
f31e c9				ret 
f31f			 
f31f			sectran: 
f31f				;translate sector bc using table at de, res into hl 
f31f				;no skewing needed for this system. 
f31f 60				ld h,b 
f320 69				ld l,c 
f321 c9				ret 
f322			 
f322			prmsg: 
f322 7e				ld a, (hl) 
f323 b7				or a 
f324 c8				ret z 
f325 4f				ld c, a 
f326 cd d6 f2			call conout 
f329 23				inc hl 
f32a c3 22 f3			jp prmsg 
f32d			 
f32d			 
f32d			; Disk Parameter Block 
f32d			dpb: 
f32d 1a 00			dw 26 			; SPT:    sectors per track 
f32f 03				db 3 			; BSH:    data allocation block shift factor 
f330 07				db 7 			; BLM:    Data Allocation Mask 
f331 00				db 0 			; EXM:    Extent mask 
f332 f2 00			dw 242 			; DSM:    Disk storage capacity 
f334 3f 00			dw 63 			; DRM:    no of directory entries 
f336 c0				db 192 			; AL0 
f337 00				db 0 			; AL1 
f338 10 00			dw 16 			; CKS:    size of dir check vector 
f33a 02 00			dw 2 			; OFF:    no of reserved tracks 
f33c			 
f33c			; Sector translation table. Not used in this system. 
f33c			trans: 
f33c 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d		db 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 
f34a 0e 0f 10 11 12 13 14 15 16 17 18 19 1a		db 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 
f357			 
f357			; Scratchpad area for BDOS disk use. 
f357			dirbuf: 
f357 00...			ds 128			; DMA transfer area 
f3d7			 
f3d7			; Scratchpad area to check for changed disks 
f3d7			chk: 
f3d7 00...			ds 16 
f3e7			 
f3e7			; Scratchpad area to keep disk storage allocation information 
f3e7			all: 
f3e7 00...			ds 31 
f406			 
f406			end
# End of file bios.asm
f406
