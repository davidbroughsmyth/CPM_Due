# File bios.asm
0000			;    CP/M BIOS for avrcpm 
0000			;    Copyright (C) 2010 Sprite_tm 
0000			; 
0000			;    This program is free software: you can redistribute it and/or modify 
0000			;    it under the terms of the GNU General Public License as published by 
0000			;    the Free Software Foundation, either version 3 of the License, or 
0000			;    (at your option) any later version. 
0000			; 
0000			;    This program is distributed in the hope that it will be useful, 
0000			;    but WITHOUT ANY WARRANTY; without even the implied warranty of 
0000			;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
0000			;    GNU General Public License for more details. 
0000			; 
0000			;    You should have received a copy of the GNU General Public License 
0000			;    along with this program.  If not, see <http://www.gnu.org/licenses/>. 
0000			 
0000			mem_offset:	equ	$A800				; Offset for 62K of memory 
0000			bios:		equ	$4A00+mem_offset	; base of BIOS 
0000			cpmb:		equ	$3400+mem_offset	; base of CPM (CCP) 
0000			bdos:		equ	$3c06+mem_offset	; base of BDOS 
0000			iobyte:		equ $0003				; address of the IOBYTE 
0000			cdisk:		equ	$0004				; address of last logged disk 
0000			buff:		equ	$0080				; default buffer address 
0000			 
0000			cr:			equ	$0d					; carriage return 
0000			lf:			equ	$0a					; line feed 
0000			 
0000			 
0000			 
0000			org	bios 
f200 c3 6c f2			jp boot 
f203			wboote: 
f203 c3 7f f2			jp wboot 
f206 c3 d9 f2			jp const 
f209 c3 dc f2			jp conin 
f20c c3 e6 f2			jp conout 
f20f c3 ec f2			jp list 
f212 c3 ed f2			jp punch 
f215 c3 ee f2			jp reader 
f218 c3 f1 f2			jp home 
f21b c3 f8 f2			jp seldsk 
f21e c3 09 f3			jp settrk 
f221 c3 0f f3			jp setsec 
f224 c3 15 f3			jp setdma 
f227 c3 1e f3			jp read 
f22a c3 25 f3			jp write 
f22d c3 2c f3			jp listst 
f230 c3 2f f3			jp sectran 
f233			 
f233			; Disk Parameter Header 
f233			dph: 
f233 4f f3			dw trans 						; XLT:    Address of translation table 
f235 00 00			dw 0 							; 000:    Scratchpad 
f237 00 00			dw 0 							; 000:    Scratchpad 
f239 00 00			dw 0 							; 000:    Scratchpad 
f23b 6a f3			dw dirbuf 						; DIRBUF: Address of a dirbuff scratchpad 
f23d 40 f3			dw dpb 							; DPB:    Address of a disk parameter block 
f23f ea f3			dw chk 							; CSV:    Address of scratchpad area for changed disks 
f241 fa f3			dw all 							; ALV:    Address of an allocation info sratchpad 
f243			 
f243			signon: 
f243 0d 0a 0a			db 0dh, 0ah, 0ah 
f246 ..				db '64' 
f248 .. 0d 0a			db 'K CP/M Vers 2.2', cr, lf 
f259 .. 0d 0a 00		db 'Z80Due BIOS v0.2', cr, lf, 0 
f26c			 
f26c			boot: 
f26c 31 00 01			ld sp, buff+$80 
f26f 21 43 f2			ld hl, signon 
f272 cd 35 f3			call prmsg 
f275 af				xor a 
f276 32 03 00			ld (iobyte), a					; clear the IOBYTE 
f279 32 04 00			ld (cdisk), a					; clear the active disk 
f27c c3 ae f2			jp gocpm 
f27f			 
f27f			wboot: 
f27f 31 80 00			ld sp, buff						; use the disk buffer space for now. Not being used now. 
f282			 
f282			; reload CP/M and initialize low memory 
f282			loadcpm: 
f282 06 33			ld b, 51						; load 51 sectors (2 tracks * 26 sectors - ipl) 
f284 11 01 00			ld de, $0001					; start with track 0 sector 1 
f287 21 00 dc			ld hl, cpmb						; destination is start of CCP+b 
f28a			loadloop: 
f28a 4a				ld c, d			 				; set the track 
f28b cd 09 f3			call settrk 
f28e 4b				ld c ,e							; set sector 
f28f cd 0f f3			call setsec 
f292 c5				push bc 
f293 44				ld b, h							; set DMA 
f294 4d				ld c, l 
f295 cd 15 f3			call setdma 
f298			;	pop bc 
f298 cd 1e f3			call read 						; Read sector to RAM 
f29b			;	push bc 
f29b 01 80 00			ld bc, $80 						; increment RAM pointer to next block 
f29e 09				add hl, bc 
f29f c1				pop bc 
f2a0 1c				inc e 							; increment sector 
f2a1 7b				ld a, e 
f2a2 fe 1a			cp 26 
f2a4 c2 aa f2			jp nz, noNextTrack 
f2a7 14				inc d 							; increment track 
f2a8 1e 00			ld e, 0 						; reset sector counter to 0 
f2aa			noNextTrack: 
f2aa 05				dec b 
f2ab c2 8a f2			jp nz, loadloop 
f2ae			 
f2ae			; CP/M is reloaded. Now initialize low memory 
f2ae			; Initialize the DMA to 0x0080 
f2ae			gocpm: 
f2ae 01 80 00			ld bc, buff 
f2b1 cd 15 f3			call setdma 
f2b4			 
f2b4			; Reset monitor entry points 
f2b4 3e c3			ld a, $c3						; load a with jump opcode 
f2b6 32 00 00			ld (0), a						; store at 0000 
f2b9 21 03 f2			ld hl, wboote					; load hl with warm boot address 
f2bc			;	ld (1), hl						; store at 0001 
f2bc 7d				ld a, l 
f2bd 32 01 00			ld (1), a 
f2c0 7c				ld a, h 
f2c1 32 02 00			ld (2), a 
f2c4 32 05 00			ld (5), a						; store jump at 0005 
f2c7 21 06 e4			ld hl, bdos						; load hl with bdos entry 
f2ca			;	ld (6), hl						; store at 0006 
f2ca 7d				ld a, l 
f2cb 32 06 00			ld (6), a 
f2ce 7c				ld a, h 
f2cf 32 07 00			ld (7), a 
f2d2			 
f2d2			; Put the initial drive # into c and jump to CP/M 
f2d2 3a 04 00			ld a, (cdisk) 
f2d5 4f				ld c, a 
f2d6			 
f2d6 c3 00 dc			jp cpmb 
f2d9			 
f2d9			const: 
f2d9 db 00			in a,(0) 
f2db c9				ret 
f2dc			 
f2dc			conin: 
f2dc db 00			in a,(0) 
f2de fe ff			cp $ff 
f2e0 c2 dc f2			jp nz,conin 
f2e3			 
f2e3 db 01			in a,(1) 
f2e5 c9				ret 
f2e6			 
f2e6			conout: 
f2e6 f5				push af 
f2e7 79				ld a,c 
f2e8 d3 02			out (2),a 
f2ea f1				pop af 
f2eb c9				ret 
f2ec			 
f2ec			list: 
f2ec c9				ret 
f2ed			 
f2ed			punch: 
f2ed c9				ret 
f2ee			 
f2ee			reader: 
f2ee 3e 1f			ld a,$1F 
f2f0 c9				ret 
f2f1			 
f2f1			home: 
f2f1 f5				push af 
f2f2 3e 00			ld a,0 
f2f4 d3 10			out (16),a 
f2f6 f1				pop af 
f2f7 c9				ret 
f2f8			 
f2f8			seldsk: 
f2f8 f5				push af 
f2f9 79				ld a,c 
f2fa fe 00			cp 0 
f2fc c2 04 f3			jp nz,seldsk_na 
f2ff 21 33 f2			ld hl,dph 
f302 f1				pop af 
f303 c9				ret 
f304			seldsk_na: 
f304 21 00 00			ld hl,0 
f307 f1				pop af 
f308 c9				ret 
f309			 
f309			settrk: 
f309 f5				push af 
f30a 79				ld a,c 
f30b d3 10			out (16),a 
f30d f1				pop af 
f30e c9				ret 
f30f			 
f30f			setsec: 
f30f f5				push af 
f310 79				ld a,c 
f311 d3 12			out (18),a 
f313 f1				pop af 
f314 c9				ret 
f315			 
f315			setdma: 
f315 f5				push af 
f316 79				ld a,c 
f317 d3 14			out (20),a 
f319 78				ld a,b 
f31a d3 15			out (21),a 
f31c f1				pop af 
f31d c9				ret 
f31e			 
f31e			read: 
f31e 3e 01			ld a,1 
f320 d3 16			out (22),a 
f322 3e 00			ld a,0 
f324 c9				ret 
f325			 
f325			write: 
f325 3e 02			ld a,2 
f327 d3 16			out (22),a 
f329 3e 00			ld a,0 
f32b c9				ret 
f32c			 
f32c			listst: 
f32c 3e 00			ld a,0 
f32e c9				ret 
f32f			 
f32f			sectran: 
f32f				;translate sector bc using table at de, res into hl 
f32f				;not implemented :) 
f32f 60				ld h,b 
f330 69				ld l,c 
f331 c9				ret 
f332			 
f332 21 43 f2			ld hl, signon					; print the CP/M banner 
f335			 
f335			prmsg: 
f335 7e				ld a, (hl) 
f336 b7				or a 
f337 c8				ret z 
f338 4f				ld c, a 
f339 cd e6 f2			call conout 
f33c 23				inc hl 
f33d c3 35 f3			jp prmsg 
f340			 
f340			 
f340			; Disk Parameter Block 
f340			dpb: 
f340 1a 00			dw 26 			; SPT:    sectors per track 
f342 03				db 3 			; BSH:    data allocation block shift factor 
f343 07				db 7 			; BLM:    Data Allocation Mask 
f344 00				db 0 			; EXM:    Extent mask 
f345 f2 00			dw 242 			; DSM:    Disk storage capacity 
f347 3f 00			dw 63 			; DRM:    no of directory entries 
f349 c0				db 192 			; AL0 
f34a 00				db 0 			; AL1 
f34b 10 00			dw 16 			; CKS:    size of dir check vector 
f34d 02 00			dw 2 			; OFF:    no of reserved tracks 
f34f			 
f34f			; Sector translation table. Not used in this system. 
f34f			trans: 
f34f 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d		db 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 
f35d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a		db 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 
f36a			 
f36a			; Scratchpad area for BDOS directory operation. 
f36a			dirbuf: 
f36a 00...			ds 128			; DMA transfer area 
f3ea			 
f3ea			; Scratchpad area to check for changed disks 
f3ea			chk: 
f3ea 00...			ds 16			;  
f3fa			 
f3fa			; Scratchpad area to keep disk storage allocation information 
f3fa			all: 
f3fa 00...			ds 31			; 
f419			 
f419			end
# End of file bios.asm
f419
